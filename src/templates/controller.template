'use strict'

const __targetNameJoker__ = require('../models/__targetNameJoker__.model')

const getAllFrom__targetNameJoker__ = (request, response) => {
  __targetNameJoker__.find({}, (err, data) => {
    if (err) {
      response.status(500).send({
        msg: JSON.stringify(err),
        error: 'Error in getAllFrom__targetNameJoker__()' 
      })
    } else {
      if (!data) {
        response.status(404).send({
          msg: 'Nothing to show in __targetNameJoker__!'
        })
      } else {
        response.status(200).json(data)
      }
    }
  })
}

const getOne__targetNameJoker__ = (request, response) => {
  const _id = request.query._id

  __targetNameJoker__.findById(_id, (err, item) => {
    if (err) {
      return response.status(500).send('Error finding __targetNameJoker__ object')
    }

    response.status(200).json(item)
  })
}

const saveNew__targetNameJoker__ = (request, response) => {
  const new__targetNameJoker__ = new __targetNameJoker__({
    __saveKeyValueLine__
  })

  new__targetNameJoker__.save(err => {
    if (err) {
      response.status(500).send('Error saving new __targetNameJoker__ object')
      return
    }
    
    response.status(200).json({
      error: false, msg: `new __targetNameJoker__ saved!`
    })
  })
}

const update__targetNameJoker__ = (request, response) => {
  const _id = request.query._id

  __targetNameJoker__.findByIdAndUpdate(_id, request.body, {
      new: true,
      useFindAndModify: false
    }, (err, updated) => {
    
    if (err) {
      return response.status(500).send('Error updating __targetNameJoker__ object')
    }

    response.status(200).json({
      error: false,
      msg: `__targetNameJoker__ with id ${_id} updated successfully`,
      new__targetNameJoker__: updated
    })
  })
}

const delete__targetNameJoker__ = (request, response) => {
  const _id = request.query._id

  __targetNameJoker__.findByIdAndDelete(_id, err => {
    if (err) {
      return response.status(500).send('Error deleting __targetNameJoker__ object')
    }

    response.status(200).json({
      error: false, msg: `__targetNameJoker__ with id ${_id} deleted successfully`
    })
  })
}

module.exports = {
  getAllFrom__targetNameJoker__
  ,getOne__targetNameJoker__
  ,saveNew__targetNameJoker__
  ,update__targetNameJoker__
  ,delete__targetNameJoker__
}
